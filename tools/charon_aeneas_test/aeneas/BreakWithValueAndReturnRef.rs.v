(** THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS *)
(** [rem_cli] *)
Require Import Primitives.
Import Primitives.
Require Import Coq.ZArith.ZArith.
Require Import List.
Import ListNotations.
Local Open Scope Primitives_scope.
Module BreakWithValueAndReturnRef.rs.

(** [core::result::Result]
    Source: '/rustc/library/core/src/result.rs', lines 527:0-527:21
    Name pattern: core::result::Result *)
Inductive core_result_Result_t (T : Type) (E : Type) :=
| Core_result_Result_Ok : T -> core_result_Result_t T E
| Core_result_Result_Err : E -> core_result_Result_t T E
.

Arguments Core_result_Result_Ok { _ } { _ }.
Arguments Core_result_Result_Err { _ } { _ }.

(** [rem_cli::fun_name]:
    Source: '/home/matt/rem-matt/rem-cli/tools/charon_aeneas_test/rust/break_with_value_and_return_ref.rs', lines 12:0-19:1 *)
Definition fun_name : result (core_result_Result_t i32 i64) :=
  if 1%i32 s= 42%i32
  then Ok (Core_result_Result_Err 3%i64)
  else (m <- i32_add 1%i32 1%i32; Ok (Core_result_Result_Ok m))
.

(** [rem_cli::foo]: loop 0:
    Source: '/home/matt/rem-matt/rem-cli/tools/charon_aeneas_test/rust/break_with_value_and_return_ref.rs', lines 2:4-9:5 *)
Fixpoint foo_loop : result i64 :=
  r <- fun_name;
  match r with
  | Core_result_Result_Ok value => _ <- i32_add 1%i32 value; foo_loop
  | Core_result_Result_Err value => Ok value
  end
.

(** [rem_cli::foo]:
    Source: '/home/matt/rem-matt/rem-cli/tools/charon_aeneas_test/rust/break_with_value_and_return_ref.rs', lines 1:0-10:1 *)
Definition foo : result i64 :=
  foo_loop.

(** [rem_cli::main]:
    Source: '/home/matt/rem-matt/rem-cli/tools/charon_aeneas_test/rust/break_with_value_and_return_ref.rs', lines 21:0-23:1 *)
Definition main : result unit :=
  Ok tt.

End BreakWithValueAndReturnRef.rs.
