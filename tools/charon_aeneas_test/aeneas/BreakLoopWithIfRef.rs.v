(** THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS *)
(** [rem_cli] *)
Require Import Primitives.
Import Primitives.
Require Import Coq.ZArith.ZArith.
Require Import List.
Import ListNotations.
Local Open Scope Primitives_scope.
Module BreakLoopWithIfRef.rs.

(** [core::ops::control_flow::ControlFlow]
    Source: '/rustc/library/core/src/ops/control_flow.rs', lines 85:0-85:31
    Name pattern: core::ops::control_flow::ControlFlow *)
Inductive core_ops_control_flow_ControlFlow_t (B : Type) (C : Type) :=
| Core_ops_control_flow_ControlFlow_Continue :
  C ->
  core_ops_control_flow_ControlFlow_t B C
| Core_ops_control_flow_ControlFlow_Break :
  B ->
  core_ops_control_flow_ControlFlow_t B C
.

Arguments Core_ops_control_flow_ControlFlow_Continue { _ } { _ }.
Arguments Core_ops_control_flow_ControlFlow_Break { _ } { _ }.

(** [rem_cli::fun_name]:
    Source: '/home/matt/rem-matt/rem-cli/tools/charon_aeneas_test/rust/break_loop_with_if_ref.rs', lines 13:0-18:1 *)
Definition fun_name
  (n : i32) : result ((core_ops_control_flow_ControlFlow_t unit unit) * i32) :=
  _ <- i32_add n 1%i32; Ok (Core_ops_control_flow_ControlFlow_Break tt, n)
.

(** [rem_cli::foo]: loop 0:
    Source: '/home/matt/rem-matt/rem-cli/tools/charon_aeneas_test/rust/break_loop_with_if_ref.rs', lines 4:4-10:5 *)
Fixpoint foo_loop : result unit :=
  p <- fun_name 1%i32;
  let (cf, n) := p in
  match cf with
  | Core_ops_control_flow_ControlFlow_Continue _ =>
    _ <- i32_add 1%i32 n; foo_loop
  | Core_ops_control_flow_ControlFlow_Break _ => Ok tt
  end
.

(** [rem_cli::foo]:
    Source: '/home/matt/rem-matt/rem-cli/tools/charon_aeneas_test/rust/break_loop_with_if_ref.rs', lines 3:0-11:1 *)
Definition foo : result unit :=
  foo_loop.

(** [rem_cli::main]:
    Source: '/home/matt/rem-matt/rem-cli/tools/charon_aeneas_test/rust/break_loop_with_if_ref.rs', lines 20:0-22:1 *)
Definition main : result unit :=
  Ok tt.

End BreakLoopWithIfRef.rs.
