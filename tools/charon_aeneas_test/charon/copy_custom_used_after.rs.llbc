{"charon_version":"0.1.67","translated":{"crate_name":"rem_cli","real_crate_name":"rem_cli","options":{"ullbc":false,"lib":false,"bin":null,"mir_promoted":false,"mir_optimized":false,"crate_name":null,"input_file":"/home/matt/rem-matt/rem-cli/tools/charon_aeneas_test/rust/copy_custom_used_after.rs","read_llbc":null,"dest_dir":null,"dest_file":"/home/matt/rem-matt/rem-cli/tools/charon_aeneas_test/charon/copy_custom_used_after.rs.llbc","use_polonius":false,"no_code_duplication":false,"extract_opaque_bodies":false,"translate_all_methods":false,"include":[],"opaque":[],"exclude":[],"remove_associated_types":[],"hide_marker_traits":true,"no_cargo":false,"rustc_args":[],"cargo_args":[],"abort_on_error":false,"error_on_warnings":false,"no_serialize":false,"print_original_ullbc":false,"print_ullbc":false,"print_built_llbc":false,"print_llbc":false,"no_merge_goto_chains":false},"all_ids":[{"Type":0},{"TraitDecl":0},{"TraitImpl":0},{"TraitDecl":1},{"TraitImpl":1},{"Fun":0},{"Fun":1},{"TraitDecl":2},{"Fun":2},{"Fun":3},{"Fun":4}],"item_names":[{"key":{"TraitImpl":1},"value":[{"Ident":["rem_cli",0]},{"Impl":[{"Trait":1},1]}]},{"key":{"Type":0},"value":[{"Ident":["rem_cli",0]},{"Ident":["Counter",0]}]},{"key":{"TraitDecl":2},"value":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["Sized",0]}]},{"key":{"Fun":0},"value":[{"Ident":["rem_cli",0]},{"Ident":["foo",0]}]},{"key":{"TraitImpl":0},"value":[{"Ident":["rem_cli",0]},{"Impl":[{"Trait":0},0]}]},{"key":{"Fun":2},"value":[{"Ident":["rem_cli",0]},{"Impl":[{"Trait":0},0]},{"Ident":["clone",0]}]},{"key":{"Fun":3},"value":[{"Ident":["core",0]},{"Ident":["clone",0]},{"Ident":["Clone",0]},{"Ident":["clone",0]}]},{"key":{"Fun":1},"value":[{"Ident":["rem_cli",0]},{"Ident":["main",0]}]},{"key":{"TraitDecl":0},"value":[{"Ident":["core",0]},{"Ident":["clone",0]},{"Ident":["Clone",0]}]},{"key":{"TraitDecl":1},"value":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["Copy",0]}]},{"key":{"Fun":4},"value":[{"Ident":["core",0]},{"Ident":["clone",0]},{"Ident":["Clone",0]},{"Ident":["clone_from",0]}]}],"files":[{"name":{"Local":"/home/matt/rem-matt/rem-cli/tools/charon_aeneas_test/rust/copy_custom_used_after.rs"},"contents":"#[derive(Clone, Copy)]\nstruct Counter(i32);\nfn foo() {\n    let c = Counter(0);\n    let n = c.0;\n    let m = c.0;\n}\n\nfn main() {\n\n}\n"},{"name":{"Virtual":"/rustc/library/core/src/lib.rs"},"contents":null},{"name":{"Virtual":"/rustc/library/core/src/clone.rs"},"contents":null},{"name":{"Virtual":"/rustc/library/core/src/marker.rs"},"contents":null}],"type_decls":[{"def_id":0,"item_meta":{"name":[{"Ident":["rem_cli",0]},{"Ident":["Counter",0]}],"span":{"span":{"file_id":0,"beg":{"line":2,"col":0},"end":{"line":2,"col":20}},"generated_from_span":null},"source_text":"struct Counter(i32);","attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":true,"opacity":"Transparent"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"kind":{"Struct":[{"span":{"span":{"file_id":0,"beg":{"line":2,"col":15},"end":{"line":2,"col":18}},"generated_from_span":null},"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"name":null,"ty":{"Literal":{"Integer":"I32"}}}]}}],"fun_decls":[{"def_id":0,"item_meta":{"name":[{"Ident":["rem_cli",0]},{"Ident":["foo",0]}],"span":{"span":{"file_id":0,"beg":{"line":3,"col":0},"end":{"line":7,"col":1}},"generated_from_span":null},"source_text":"fn foo() {\n    let c = Counter(0);\n    let n = c.0;\n    let m = c.0;\n}","attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":true,"opacity":"Transparent"},"signature":{"is_unsafe":false,"is_closure":false,"closure_info":null,"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[],"output":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},"kind":"Regular","is_global_initializer":null,"body":{"Ok":{"Structured":{"span":{"span":{"file_id":0,"beg":{"line":3,"col":0},"end":{"line":7,"col":1}},"generated_from_span":null},"locals":{"arg_count":0,"vars":[{"index":0,"name":null,"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"index":1,"name":"c","ty":{"Adt":[{"Adt":0},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]}},{"index":2,"name":"n","ty":{"Literal":{"Integer":"I32"}}},{"index":3,"name":"m","ty":{"Literal":{"Integer":"I32"}}},{"index":4,"name":null,"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}]},"comments":[],"body":{"span":{"span":{"file_id":0,"beg":{"line":3,"col":9},"end":{"line":7,"col":1}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":0,"beg":{"line":4,"col":12},"end":{"line":4,"col":22}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":1},"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]}},{"Aggregate":[{"Adt":[{"Adt":0},null,null,{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]},[{"Const":{"value":{"Literal":{"Scalar":{"I32":"0"}}},"ty":{"Literal":{"Integer":"I32"}}}}]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":8},"end":{"line":4,"col":9}},"generated_from_span":null},"content":{"FakeRead":{"kind":{"Base":1},"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":12},"end":{"line":5,"col":15}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":2},"ty":{"Literal":{"Integer":"I32"}}},{"Use":{"Copy":{"kind":{"Projection":[{"kind":{"Base":1},"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]}},{"Field":[{"Adt":[0,null]},0]}]},"ty":{"Literal":{"Integer":"I32"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":8},"end":{"line":5,"col":9}},"generated_from_span":null},"content":{"FakeRead":{"kind":{"Base":2},"ty":{"Literal":{"Integer":"I32"}}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":6,"col":12},"end":{"line":6,"col":15}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":3},"ty":{"Literal":{"Integer":"I32"}}},{"Use":{"Copy":{"kind":{"Projection":[{"kind":{"Base":1},"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]}},{"Field":[{"Adt":[0,null]},0]}]},"ty":{"Literal":{"Integer":"I32"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":6,"col":8},"end":{"line":6,"col":9}},"generated_from_span":null},"content":{"FakeRead":{"kind":{"Base":3},"ty":{"Literal":{"Integer":"I32"}}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":9},"end":{"line":7,"col":1}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":4},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"Aggregate":[{"Adt":["Tuple",null,null,{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},[]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":9},"end":{"line":7,"col":1}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":0},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"Use":{"Move":{"kind":{"Base":4},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":7,"col":0},"end":{"line":7,"col":1}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":3},"ty":{"Literal":{"Integer":"I32"}}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":7,"col":0},"end":{"line":7,"col":1}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":2},"ty":{"Literal":{"Integer":"I32"}}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":7,"col":0},"end":{"line":7,"col":1}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":1},"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":7,"col":1},"end":{"line":7,"col":1}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":0},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"Aggregate":[{"Adt":["Tuple",null,null,{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},[]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":7,"col":1},"end":{"line":7,"col":1}},"generated_from_span":null},"content":"Return","comments_before":[]}]}}}}},{"def_id":1,"item_meta":{"name":[{"Ident":["rem_cli",0]},{"Ident":["main",0]}],"span":{"span":{"file_id":0,"beg":{"line":9,"col":0},"end":{"line":11,"col":1}},"generated_from_span":null},"source_text":"fn main() {\n\n}","attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":true,"opacity":"Transparent"},"signature":{"is_unsafe":false,"is_closure":false,"closure_info":null,"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[],"output":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},"kind":"Regular","is_global_initializer":null,"body":{"Ok":{"Structured":{"span":{"span":{"file_id":0,"beg":{"line":9,"col":0},"end":{"line":11,"col":1}},"generated_from_span":null},"locals":{"arg_count":0,"vars":[{"index":0,"name":null,"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"index":1,"name":null,"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}]},"comments":[],"body":{"span":{"span":{"file_id":0,"beg":{"line":9,"col":10},"end":{"line":11,"col":1}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":0,"beg":{"line":9,"col":10},"end":{"line":11,"col":1}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":1},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"Aggregate":[{"Adt":["Tuple",null,null,{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},[]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":9,"col":10},"end":{"line":11,"col":1}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":0},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"Use":{"Move":{"kind":{"Base":1},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":11,"col":1},"end":{"line":11,"col":1}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":0},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"Aggregate":[{"Adt":["Tuple",null,null,{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},[]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":11,"col":1},"end":{"line":11,"col":1}},"generated_from_span":null},"content":"Return","comments_before":[]}]}}}}},{"def_id":2,"item_meta":{"name":[{"Ident":["rem_cli",0]},{"Impl":[{"Trait":0},0]},{"Ident":["clone",0]}],"span":{"span":{"file_id":0,"beg":{"line":1,"col":9},"end":{"line":1,"col":14}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"Unknown":{"path":"inline","args":null}}],"inline":"Hint","rename":null,"public":true},"is_local":true,"opacity":"Transparent"},"signature":{"is_unsafe":false,"is_closure":false,"closure_info":null,"generics":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Adt":[{"Adt":0},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]},"Shared"]}],"output":{"Adt":[{"Adt":0},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]}},"kind":{"TraitImpl":{"impl_ref":{"impl_id":0,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitImpl":0}}}},"trait_ref":{"trait_id":0,"generics":{"regions":[],"types":[{"Adt":[{"Adt":0},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":0}}}},"item_name":"clone","reuses_default":true}},"is_global_initializer":null,"body":{"Ok":{"Structured":{"span":{"span":{"file_id":0,"beg":{"line":1,"col":9},"end":{"line":1,"col":14}},"generated_from_span":null},"locals":{"arg_count":1,"vars":[{"index":0,"name":null,"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]}},{"index":1,"name":"self","ty":{"Ref":["Erased",{"Adt":[{"Adt":0},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]},"Shared"]}}]},"comments":[],"body":{"span":{"span":{"file_id":0,"beg":{"line":1,"col":9},"end":{"line":1,"col":14}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":0,"beg":{"line":1,"col":9},"end":{"line":1,"col":14}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":0},"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]}},{"Use":{"Copy":{"kind":{"Projection":[{"kind":{"Base":1},"ty":{"Ref":["Erased",{"Adt":[{"Adt":0},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]},"Shared"]}},"Deref"]},"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":1,"col":14},"end":{"line":1,"col":14}},"generated_from_span":null},"content":"Return","comments_before":[]}]}}}}},{"def_id":3,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["clone",0]},{"Ident":["Clone",0]},{"Ident":["clone",0]}],"span":{"span":{"file_id":2,"beg":{"line":165,"col":4},"end":{"line":165,"col":28}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns a copy of the value."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # #![allow(noop_method_call)]"},{"DocComment":" let hello = \"Hello\"; // &str implements Clone"},{"DocComment":""},{"DocComment":" assert_eq!(\"Hello\", hello.clone());"},{"DocComment":" ```"},{"Unknown":{"path":"must_use","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign"},"signature":{"is_unsafe":false,"is_closure":false,"closure_info":null,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]}],"output":{"TypeVar":{"Free":0}}},"kind":{"TraitDecl":{"trait_ref":{"trait_id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":0}}}},"item_name":"clone","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},null],"global_decls":[],"trait_decls":[{"def_id":0,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["clone",0]},{"Ident":["Clone",0]}],"span":{"span":{"file_id":2,"beg":{"line":149,"col":0},"end":{"line":149,"col":22}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" A common trait for the ability to explicitly duplicate an object."},{"DocComment":""},{"DocComment":" Differs from [`Copy`] in that [`Copy`] is implicit and an inexpensive bit-wise copy, while"},{"DocComment":" `Clone` is always explicit and may or may not be expensive. In order to enforce"},{"DocComment":" these characteristics, Rust does not allow you to reimplement [`Copy`], but you"},{"DocComment":" may reimplement `Clone` and run arbitrary code."},{"DocComment":""},{"DocComment":" Since `Clone` is more general than [`Copy`], you can automatically make anything"},{"DocComment":" [`Copy`] be `Clone` as well."},{"DocComment":""},{"DocComment":" ## Derivable"},{"DocComment":""},{"DocComment":" This trait can be used with `#[derive]` if all fields are `Clone`. The `derive`d"},{"DocComment":" implementation of [`Clone`] calls [`clone`] on each field."},{"DocComment":""},{"DocComment":" [`clone`]: Clone::clone"},{"DocComment":""},{"DocComment":" For a generic struct, `#[derive]` implements `Clone` conditionally by adding bound `Clone` on"},{"DocComment":" generic parameters."},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" // `derive` implements Clone for Reading<T> when T is Clone."},{"DocComment":" #[derive(Clone)]"},{"DocComment":" struct Reading<T> {"},{"DocComment":"     frequency: T,"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" ## How can I implement `Clone`?"},{"DocComment":""},{"DocComment":" Types that are [`Copy`] should have a trivial implementation of `Clone`. More formally:"},{"DocComment":" if `T: Copy`, `x: T`, and `y: &T`, then `let x = y.clone();` is equivalent to `let x = *y;`."},{"DocComment":" Manual implementations should be careful to uphold this invariant; however, unsafe code"},{"DocComment":" must not rely on it to ensure memory safety."},{"DocComment":""},{"DocComment":" An example is a generic struct holding a function pointer. In this case, the"},{"DocComment":" implementation of `Clone` cannot be `derive`d, but can be implemented as:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" struct Generate<T>(fn() -> T);"},{"DocComment":""},{"DocComment":" impl<T> Copy for Generate<T> {}"},{"DocComment":""},{"DocComment":" impl<T> Clone for Generate<T> {"},{"DocComment":"     fn clone(&self) -> Self {"},{"DocComment":"         *self"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" If we `derive`:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" #[derive(Copy, Clone)]"},{"DocComment":" struct Generate<T>(fn() -> T);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" the auto-derived implementations will have unnecessary `T: Copy` and `T: Clone` bounds:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # struct Generate<T>(fn() -> T);"},{"DocComment":""},{"DocComment":" // Automatically derived"},{"DocComment":" impl<T: Copy> Copy for Generate<T> { }"},{"DocComment":""},{"DocComment":" // Automatically derived"},{"DocComment":" impl<T: Clone> Clone for Generate<T> {"},{"DocComment":"     fn clone(&self) -> Generate<T> {"},{"DocComment":"         Generate(Clone::clone(&self.0))"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" The bounds are unnecessary because clearly the function itself should be"},{"DocComment":" copy- and cloneable even if its return type is not:"},{"DocComment":""},{"DocComment":" ```compile_fail,E0599"},{"DocComment":" #[derive(Copy, Clone)]"},{"DocComment":" struct Generate<T>(fn() -> T);"},{"DocComment":""},{"DocComment":" struct NotCloneable;"},{"DocComment":""},{"DocComment":" fn generate_not_cloneable() -> NotCloneable {"},{"DocComment":"     NotCloneable"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" Generate(generate_not_cloneable).clone(); // error: trait bounds were not satisfied"},{"DocComment":" // Note: With the manual implementations the above line will compile."},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" ## Additional implementors"},{"DocComment":""},{"DocComment":" In addition to the [implementors listed below][impls],"},{"DocComment":" the following types also implement `Clone`:"},{"DocComment":""},{"DocComment":" * Function item types (i.e., the distinct types defined for each function)"},{"DocComment":" * Function pointer types (e.g., `fn() -> i32`)"},{"DocComment":" * Closure types, if they capture no value from the environment"},{"DocComment":"   or if all such captured values implement `Clone` themselves."},{"DocComment":"   Note that variables captured by shared reference always implement `Clone`"},{"DocComment":"   (even if the referent doesn't),"},{"DocComment":"   while variables captured by mutable reference never implement `Clone`."},{"DocComment":""},{"DocComment":" [impls]: #implementors"},{"Unknown":{"path":"rustc_diagnostic_item","args":null}},{"Unknown":{"path":"rustc_trivial_field_reads","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[null],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"required_methods":[["clone",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":3,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"Fun":3}}}},"kind":{"TraitMethod":[0,"clone"]}}]],"provided_methods":[]},{"def_id":1,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["Copy",0]}],"span":{"span":{"file_id":3,"beg":{"line":416,"col":0},"end":{"line":416,"col":21}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Types whose values can be duplicated simply by copying bits."},{"DocComment":""},{"DocComment":" By default, variable bindings have 'move semantics.' In other"},{"DocComment":" words:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" #[derive(Debug)]"},{"DocComment":" struct Foo;"},{"DocComment":""},{"DocComment":" let x = Foo;"},{"DocComment":""},{"DocComment":" let y = x;"},{"DocComment":""},{"DocComment":" // `x` has moved into `y`, and so cannot be used"},{"DocComment":""},{"DocComment":" // println!(\"{x:?}\"); // error: use of moved value"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" However, if a type implements `Copy`, it instead has 'copy semantics':"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" // We can derive a `Copy` implementation. `Clone` is also required, as it's"},{"DocComment":" // a supertrait of `Copy`."},{"DocComment":" #[derive(Debug, Copy, Clone)]"},{"DocComment":" struct Foo;"},{"DocComment":""},{"DocComment":" let x = Foo;"},{"DocComment":""},{"DocComment":" let y = x;"},{"DocComment":""},{"DocComment":" // `y` is a copy of `x`"},{"DocComment":""},{"DocComment":" println!(\"{x:?}\"); // A-OK!"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" It's important to note that in these two examples, the only difference is whether you"},{"DocComment":" are allowed to access `x` after the assignment. Under the hood, both a copy and a move"},{"DocComment":" can result in bits being copied in memory, although this is sometimes optimized away."},{"DocComment":""},{"DocComment":" ## How can I implement `Copy`?"},{"DocComment":""},{"DocComment":" There are two ways to implement `Copy` on your type. The simplest is to use `derive`:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" #[derive(Copy, Clone)]"},{"DocComment":" struct MyStruct;"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" You can also implement `Copy` and `Clone` manually:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" struct MyStruct;"},{"DocComment":""},{"DocComment":" impl Copy for MyStruct { }"},{"DocComment":""},{"DocComment":" impl Clone for MyStruct {"},{"DocComment":"     fn clone(&self) -> MyStruct {"},{"DocComment":"         *self"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" There is a small difference between the two. The `derive` strategy will also place a `Copy`"},{"DocComment":" bound on type parameters:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" #[derive(Clone)]"},{"DocComment":" struct MyStruct<T>(T);"},{"DocComment":""},{"DocComment":" impl<T: Copy> Copy for MyStruct<T> { }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" This isn't always desired. For example, shared references (`&T`) can be copied regardless of"},{"DocComment":" whether `T` is `Copy`. Likewise, a generic struct containing markers such as [`PhantomData`]"},{"DocComment":" could potentially be duplicated with a bit-wise copy."},{"DocComment":""},{"DocComment":" ## What's the difference between `Copy` and `Clone`?"},{"DocComment":""},{"DocComment":" Copies happen implicitly, for example as part of an assignment `y = x`. The behavior of"},{"DocComment":" `Copy` is not overloadable; it is always a simple bit-wise copy."},{"DocComment":""},{"DocComment":" Cloning is an explicit action, `x.clone()`. The implementation of [`Clone`] can"},{"DocComment":" provide any type-specific behavior necessary to duplicate values safely. For example,"},{"DocComment":" the implementation of [`Clone`] for [`String`] needs to copy the pointed-to string"},{"DocComment":" buffer in the heap. A simple bitwise copy of [`String`] values would merely copy the"},{"DocComment":" pointer, leading to a double free down the line. For this reason, [`String`] is [`Clone`]"},{"DocComment":" but not `Copy`."},{"DocComment":""},{"DocComment":" [`Clone`] is a supertrait of `Copy`, so everything which is `Copy` must also implement"},{"DocComment":" [`Clone`]. If a type is `Copy` then its [`Clone`] implementation only needs to return `*self`"},{"DocComment":" (see the example above)."},{"DocComment":""},{"DocComment":" ## When can my type be `Copy`?"},{"DocComment":""},{"DocComment":" A type can implement `Copy` if all of its components implement `Copy`. For example, this"},{"DocComment":" struct can be `Copy`:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # #[allow(dead_code)]"},{"DocComment":" #[derive(Copy, Clone)]"},{"DocComment":" struct Point {"},{"DocComment":"    x: i32,"},{"DocComment":"    y: i32,"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" A struct can be `Copy`, and [`i32`] is `Copy`, therefore `Point` is eligible to be `Copy`."},{"DocComment":" By contrast, consider"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # #![allow(dead_code)]"},{"DocComment":" # struct Point;"},{"DocComment":" struct PointList {"},{"DocComment":"     points: Vec<Point>,"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" The struct `PointList` cannot implement `Copy`, because [`Vec<T>`] is not `Copy`. If we"},{"DocComment":" attempt to derive a `Copy` implementation, we'll get an error:"},{"DocComment":""},{"DocComment":" ```text"},{"DocComment":" the trait `Copy` cannot be implemented for this type; field `points` does not implement `Copy`"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" Shared references (`&T`) are also `Copy`, so a type can be `Copy`, even when it holds"},{"DocComment":" shared references of types `T` that are *not* `Copy`. Consider the following struct,"},{"DocComment":" which can implement `Copy`, because it only holds a *shared reference* to our non-`Copy`"},{"DocComment":" type `PointList` from above:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # #![allow(dead_code)]"},{"DocComment":" # struct PointList;"},{"DocComment":" #[derive(Copy, Clone)]"},{"DocComment":" struct PointListWrapper<'a> {"},{"DocComment":"     point_list_ref: &'a PointList,"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" ## When *can't* my type be `Copy`?"},{"DocComment":""},{"DocComment":" Some types can't be copied safely. For example, copying `&mut T` would create an aliased"},{"DocComment":" mutable reference. Copying [`String`] would duplicate responsibility for managing the"},{"DocComment":" [`String`]'s buffer, leading to a double free."},{"DocComment":""},{"DocComment":" Generalizing the latter case, any type implementing [`Drop`] can't be `Copy`, because it's"},{"DocComment":" managing some resource besides its own [`size_of::<T>`] bytes."},{"DocComment":""},{"DocComment":" If you try to implement `Copy` on a struct or enum containing non-`Copy` data, you will get"},{"DocComment":" the error [E0204]."},{"DocComment":""},{"DocComment":" [E0204]: ../../error_codes/E0204.html"},{"DocComment":""},{"DocComment":" ## When *should* my type be `Copy`?"},{"DocComment":""},{"DocComment":" Generally speaking, if your type _can_ implement `Copy`, it should. Keep in mind, though,"},{"DocComment":" that implementing `Copy` is part of the public API of your type. If the type might become"},{"DocComment":" non-`Copy` in the future, it could be prudent to omit the `Copy` implementation now, to"},{"DocComment":" avoid a breaking API change."},{"DocComment":""},{"DocComment":" ## Additional implementors"},{"DocComment":""},{"DocComment":" In addition to the [implementors listed below][impls],"},{"DocComment":" the following types also implement `Copy`:"},{"DocComment":""},{"DocComment":" * Function item types (i.e., the distinct types defined for each function)"},{"DocComment":" * Function pointer types (e.g., `fn() -> i32`)"},{"DocComment":" * Closure types, if they capture no value from the environment"},{"DocComment":"   or if all such captured values implement `Copy` themselves."},{"DocComment":"   Note that variables captured by shared reference always implement `Copy`"},{"DocComment":"   (even if the referent doesn't),"},{"DocComment":"   while variables captured by mutable reference never implement `Copy`."},{"DocComment":""},{"DocComment":" [`Vec<T>`]: ../../std/vec/struct.Vec.html"},{"DocComment":" [`String`]: ../../std/string/struct.String.html"},{"DocComment":" [`size_of::<T>`]: crate::mem::size_of"},{"DocComment":" [impls]: #implementors"},{"Unknown":{"path":"rustc_diagnostic_item","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[{"clause_id":0,"span":{"span":{"file_id":3,"beg":{"line":416,"col":16},"end":{"line":416,"col":21}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"trait_id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":0}}}}}}],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"required_methods":[],"provided_methods":[]},null],"trait_impls":[{"def_id":0,"item_meta":{"name":[{"Ident":["rem_cli",0]},{"Impl":[{"Trait":0},0]}],"span":{"span":{"file_id":0,"beg":{"line":1,"col":9},"end":{"line":1,"col":14}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"Unknown":{"path":"automatically_derived","args":null}}],"inline":null,"rename":null,"public":false},"is_local":true,"opacity":"Transparent"},"impl_trait":{"trait_id":0,"generics":{"regions":[],"types":[{"Adt":[{"Adt":0},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":0}}}},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[null],"consts":[],"types":[],"type_clauses":[],"required_methods":[["clone",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":2,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Fun":2}}}},"kind":{"TraitMethod":[0,"clone"]}}]],"provided_methods":[]},{"def_id":1,"item_meta":{"name":[{"Ident":["rem_cli",0]},{"Impl":[{"Trait":1},1]}],"span":{"span":{"file_id":0,"beg":{"line":1,"col":16},"end":{"line":1,"col":20}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"Unknown":{"path":"automatically_derived","args":null}}],"inline":null,"rename":null,"public":false},"is_local":true,"opacity":"Transparent"},"impl_trait":{"trait_id":1,"generics":{"regions":[],"types":[{"Adt":[{"Adt":0},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":1}}}},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[{"kind":{"TraitImpl":[0,{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitImpl":0}}}]},"trait_decl_ref":{"regions":[],"skip_binder":{"trait_id":0,"generics":{"regions":[],"types":[{"Adt":[{"Adt":0},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":0}}}}}}],"consts":[],"types":[],"type_clauses":[],"required_methods":[],"provided_methods":[]}],"ordered_decls":[{"Type":{"NonRec":0}},{"TraitDecl":{"NonRec":0}},{"Fun":{"NonRec":2}},{"TraitImpl":{"NonRec":0}},{"TraitDecl":{"NonRec":1}},{"TraitImpl":{"NonRec":1}},{"Fun":{"NonRec":0}},{"Fun":{"NonRec":1}},{"Fun":{"NonRec":3}}]}}