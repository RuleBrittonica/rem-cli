{"charon_version":"0.1.67","translated":{"crate_name":"rem_cli","real_crate_name":"rem_cli","options":{"ullbc":false,"lib":false,"bin":null,"mir_promoted":false,"mir_optimized":false,"crate_name":null,"input_file":"/home/matt/rem-matt/rem-cli/tools/charon_aeneas_test/rust/tail_expr_of_tail_block_nested.rs","read_llbc":null,"dest_dir":null,"dest_file":"/home/matt/rem-matt/rem-cli/tools/charon_aeneas_test/charon/tail_expr_of_tail_block_nested.rs.llbc","use_polonius":false,"no_code_duplication":false,"extract_opaque_bodies":false,"translate_all_methods":false,"include":[],"opaque":[],"exclude":[],"remove_associated_types":[],"hide_marker_traits":true,"no_cargo":false,"rustc_args":[],"cargo_args":[],"abort_on_error":false,"error_on_warnings":false,"no_serialize":false,"print_original_ullbc":false,"print_ullbc":false,"print_built_llbc":false,"print_llbc":false,"no_merge_goto_chains":false},"all_ids":[{"Fun":0},{"Fun":1},{"Type":0},{"TraitDecl":0},{"Type":1},{"Type":2},{"Fun":2},{"TraitDecl":1},{"TraitImpl":0},{"Fun":3},{"TraitDecl":2},{"TraitImpl":1},{"Fun":4},{"Fun":5},{"Fun":6},{"Fun":7}],"item_names":[{"key":{"Type":2},"value":[{"Ident":["core",0]},{"Ident":["convert",0]},{"Ident":["Infallible",0]}]},{"key":{"TraitImpl":0},"value":[{"Ident":["core",0]},{"Ident":["option",0]},{"Impl":[{"Trait":0},39]}]},{"key":{"Type":1},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["control_flow",0]},{"Ident":["ControlFlow",0]}]},{"key":{"Fun":5},"value":[{"Ident":["core",0]},{"Ident":["option",0]},{"Impl":[{"Trait":0},39]},{"Ident":["from_output",0]}]},{"key":{"Type":0},"value":[{"Ident":["core",0]},{"Ident":["option",0]},{"Ident":["Option",0]}]},{"key":{"TraitDecl":0},"value":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["Sized",0]}]},{"key":{"Fun":3},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["FromResidual",0]},{"Ident":["from_residual",0]}]},{"key":{"Fun":1},"value":[{"Ident":["rem_cli",0]},{"Ident":["main",0]}]},{"key":{"TraitDecl":1},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["Try",0]}]},{"key":{"TraitDecl":2},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["FromResidual",0]}]},{"key":{"Fun":0},"value":[{"Ident":["rem_cli",0]},{"Ident":["f",0]}]},{"key":{"Fun":7},"value":[{"Ident":["core",0]},{"Ident":["option",0]},{"Impl":[{"Trait":1},40]},{"Ident":["from_residual",0]}]},{"key":{"Fun":2},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["Try",0]},{"Ident":["branch",0]}]},{"key":{"Fun":4},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["Try",0]},{"Ident":["from_output",0]}]},{"key":{"Fun":6},"value":[{"Ident":["core",0]},{"Ident":["option",0]},{"Impl":[{"Trait":0},39]},{"Ident":["branch",0]}]},{"key":{"TraitImpl":1},"value":[{"Ident":["core",0]},{"Ident":["option",0]},{"Impl":[{"Trait":1},40]}]}],"files":[{"name":{"Local":"/home/matt/rem-matt/rem-cli/tools/charon_aeneas_test/rust/tail_expr_of_tail_block_nested.rs"},"contents":"fn f() -> Option<()> {\n    if true {\n        {\n            let a = if true {\n                Some(())?\n            } else {\n                ()\n            };\n            Some(a)\n        }\n    } else {\n        None\n    }\n}\n\nfn main() {\n\n}\n"},{"name":{"Virtual":"/rustc/library/core/src/option.rs"},"contents":null},{"name":{"Virtual":"/rustc/library/core/src/lib.rs"},"contents":null},{"name":{"Virtual":"/rustc/library/core/src/marker.rs"},"contents":null},{"name":{"Virtual":"/rustc/library/core/src/ops/control_flow.rs"},"contents":null},{"name":{"Virtual":"/rustc/library/core/src/ops/mod.rs"},"contents":null},{"name":{"Virtual":"/rustc/library/core/src/convert/mod.rs"},"contents":null},{"name":{"Virtual":"/rustc/library/core/src/ops/try_trait.rs"},"contents":null}],"type_decls":[{"def_id":0,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["option",0]},{"Ident":["Option",0]}],"span":{"span":{"file_id":1,"beg":{"line":571,"col":0},"end":{"line":571,"col":18}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" The `Option` type. See [the module level documentation](self) for more."},{"Unknown":{"path":"rustc_diagnostic_item","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign"},"generics":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"kind":{"Enum":[{"span":{"span":{"file_id":1,"beg":{"line":575,"col":4},"end":{"line":575,"col":8}},"generated_from_span":null},"attr_info":{"attributes":[{"DocComment":" No value."}],"inline":null,"rename":null,"public":true},"name":"None","fields":[],"discriminant":{"Isize":"0"}},{"span":{"span":{"file_id":1,"beg":{"line":579,"col":4},"end":{"line":579,"col":8}},"generated_from_span":null},"attr_info":{"attributes":[{"DocComment":" Some value of type `T`."}],"inline":null,"rename":null,"public":true},"name":"Some","fields":[{"span":{"span":{"file_id":1,"beg":{"line":579,"col":55},"end":{"line":579,"col":56}},"generated_from_span":null},"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"name":null,"ty":{"TypeVar":{"Free":0}}}],"discriminant":{"Isize":"1"}}]}},{"def_id":1,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["control_flow",0]},{"Ident":["ControlFlow",0]}],"span":{"span":{"file_id":4,"beg":{"line":85,"col":0},"end":{"line":85,"col":31}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Used to tell an operation whether it should exit early or go on as usual."},{"DocComment":""},{"DocComment":" This is used when exposing things (like graph traversals or visitors) where"},{"DocComment":" you want the user to be able to choose whether to exit early."},{"DocComment":" Having the enum makes it clearer -- no more wondering \"wait, what did `false`"},{"DocComment":" mean again?\" -- and allows including a value."},{"DocComment":""},{"DocComment":" Similar to [`Option`] and [`Result`], this enum can be used with the `?` operator"},{"DocComment":" to return immediately if the [`Break`] variant is present or otherwise continue normally"},{"DocComment":" with the value inside the [`Continue`] variant."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" Early-exiting from [`Iterator::try_for_each`]:"},{"DocComment":" ```"},{"DocComment":" use std::ops::ControlFlow;"},{"DocComment":""},{"DocComment":" let r = (2..100).try_for_each(|x| {"},{"DocComment":"     if 403 % x == 0 {"},{"DocComment":"         return ControlFlow::Break(x)"},{"DocComment":"     }"},{"DocComment":""},{"DocComment":"     ControlFlow::Continue(())"},{"DocComment":" });"},{"DocComment":" assert_eq!(r, ControlFlow::Break(13));"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" A basic tree traversal:"},{"DocComment":" ```"},{"DocComment":" use std::ops::ControlFlow;"},{"DocComment":""},{"DocComment":" pub struct TreeNode<T> {"},{"DocComment":"     value: T,"},{"DocComment":"     left: Option<Box<TreeNode<T>>>,"},{"DocComment":"     right: Option<Box<TreeNode<T>>>,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl<T> TreeNode<T> {"},{"DocComment":"     pub fn traverse_inorder<B>(&self, f: &mut impl FnMut(&T) -> ControlFlow<B>) -> ControlFlow<B> {"},{"DocComment":"         if let Some(left) = &self.left {"},{"DocComment":"             left.traverse_inorder(f)?;"},{"DocComment":"         }"},{"DocComment":"         f(&self.value)?;"},{"DocComment":"         if let Some(right) = &self.right {"},{"DocComment":"             right.traverse_inorder(f)?;"},{"DocComment":"         }"},{"DocComment":"         ControlFlow::Continue(())"},{"DocComment":"     }"},{"DocComment":"     fn leaf(value: T) -> Option<Box<TreeNode<T>>> {"},{"DocComment":"         Some(Box::new(Self { value, left: None, right: None }))"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" let node = TreeNode {"},{"DocComment":"     value: 0,"},{"DocComment":"     left: TreeNode::leaf(1),"},{"DocComment":"     right: Some(Box::new(TreeNode {"},{"DocComment":"         value: -1,"},{"DocComment":"         left: TreeNode::leaf(5),"},{"DocComment":"         right: TreeNode::leaf(2),"},{"DocComment":"     }))"},{"DocComment":" };"},{"DocComment":" let mut sum = 0;"},{"DocComment":""},{"DocComment":" let res = node.traverse_inorder(&mut |val| {"},{"DocComment":"     if *val < 0 {"},{"DocComment":"         ControlFlow::Break(*val)"},{"DocComment":"     } else {"},{"DocComment":"         sum += *val;"},{"DocComment":"         ControlFlow::Continue(())"},{"DocComment":"     }"},{"DocComment":" });"},{"DocComment":" assert_eq!(res, ControlFlow::Break(-1));"},{"DocComment":" assert_eq!(sum, 6);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" [`Break`]: ControlFlow::Break"},{"DocComment":" [`Continue`]: ControlFlow::Continue"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign"},"generics":{"regions":[],"types":[{"index":0,"name":"B"},{"index":1,"name":"C"}],"const_generics":[],"trait_clauses":[null,null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"kind":{"Enum":[{"span":{"span":{"file_id":4,"beg":{"line":89,"col":4},"end":{"line":89,"col":12}},"generated_from_span":null},"attr_info":{"attributes":[{"DocComment":" Move on to the next phase of the operation as normal."}],"inline":null,"rename":null,"public":true},"name":"Continue","fields":[{"span":{"span":{"file_id":4,"beg":{"line":89,"col":13},"end":{"line":89,"col":14}},"generated_from_span":null},"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"name":null,"ty":{"TypeVar":{"Free":1}}}],"discriminant":{"Isize":"0"}},{"span":{"span":{"file_id":4,"beg":{"line":93,"col":4},"end":{"line":93,"col":9}},"generated_from_span":null},"attr_info":{"attributes":[{"DocComment":" Exit the operation without running subsequent phases."}],"inline":null,"rename":null,"public":true},"name":"Break","fields":[{"span":{"span":{"file_id":4,"beg":{"line":93,"col":10},"end":{"line":93,"col":11}},"generated_from_span":null},"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"name":null,"ty":{"TypeVar":{"Free":0}}}],"discriminant":{"Isize":"1"}}]}},{"def_id":2,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["convert",0]},{"Ident":["Infallible",0]}],"span":{"span":{"file_id":6,"beg":{"line":904,"col":0},"end":{"line":904,"col":19}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" The error type for errors that can never happen."},{"DocComment":""},{"DocComment":" Since this enum has no variant, a value of this type can never actually exist."},{"DocComment":" This can be useful for generic APIs that use [`Result`] and parameterize the error type,"},{"DocComment":" to indicate that the result is always [`Ok`]."},{"DocComment":""},{"DocComment":" For example, the [`TryFrom`] trait (conversion that returns a [`Result`])"},{"DocComment":" has a blanket implementation for all types where a reverse [`Into`] implementation exists."},{"DocComment":""},{"DocComment":" ```ignore (illustrates std code, duplicating the impl in a doctest would be an error)"},{"DocComment":" impl<T, U> TryFrom<U> for T where U: Into<T> {"},{"DocComment":"     type Error = Infallible;"},{"DocComment":""},{"DocComment":"     fn try_from(value: U) -> Result<Self, Infallible> {"},{"DocComment":"         Ok(U::into(value))  // Never returns `Err`"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" # Future compatibility"},{"DocComment":""},{"DocComment":" This enum has the same role as [the `!` “never” type][never],"},{"DocComment":" which is unstable in this version of Rust."},{"DocComment":" When `!` is stabilized, we plan to make `Infallible` a type alias to it:"},{"DocComment":""},{"DocComment":" ```ignore (illustrates future std change)"},{"DocComment":" pub type Infallible = !;"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" … and eventually deprecate `Infallible`."},{"DocComment":""},{"DocComment":" However there is one case where `!` syntax can be used"},{"DocComment":" before `!` is stabilized as a full-fledged type: in the position of a function’s return type."},{"DocComment":" Specifically, it is possible to have implementations for two different function pointer types:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" trait MyTrait {}"},{"DocComment":" impl MyTrait for fn() -> ! {}"},{"DocComment":" impl MyTrait for fn() -> std::convert::Infallible {}"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" With `Infallible` being an enum, this code is valid."},{"DocComment":" However when `Infallible` becomes an alias for the never type,"},{"DocComment":" the two `impl`s will start to overlap"},{"DocComment":" and therefore will be disallowed by the language’s trait coherence rules."}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"kind":{"Enum":[]}}],"fun_decls":[{"def_id":0,"item_meta":{"name":[{"Ident":["rem_cli",0]},{"Ident":["f",0]}],"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":14,"col":1}},"generated_from_span":null},"source_text":"fn f() -> Option<()> {\n    if true {\n        {\n            let a = if true {\n                Some(())?\n            } else {\n                ()\n            };\n            Some(a)\n        }\n    } else {\n        None\n    }\n}","attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":true,"opacity":"Transparent"},"signature":{"is_unsafe":false,"is_closure":false,"closure_info":null,"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[],"output":{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}},"kind":"Regular","is_global_initializer":null,"body":{"Ok":{"Structured":{"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":14,"col":1}},"generated_from_span":null},"locals":{"arg_count":0,"vars":[{"index":0,"name":null,"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}},{"index":1,"name":null,"ty":{"Literal":"Bool"}},{"index":2,"name":"a","ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"index":3,"name":null,"ty":{"Literal":"Bool"}},{"index":4,"name":null,"ty":{"Adt":[{"Adt":1},{"regions":[],"types":[{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]},{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null,null],"target":{"Item":{"Type":1}}}]}},{"index":5,"name":null,"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}},{"index":6,"name":null,"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"index":7,"name":"residual","ty":{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}},{"index":8,"name":null,"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}},{"index":9,"name":"val","ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"index":10,"name":null,"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}]},"comments":[],"body":{"span":{"span":{"file_id":0,"beg":{"line":2,"col":4},"end":{"line":14,"col":1}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":0,"beg":{"line":2,"col":7},"end":{"line":2,"col":11}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":1},"ty":{"Literal":"Bool"}},{"Use":{"Const":{"value":{"Literal":{"Bool":true}},"ty":{"Literal":"Bool"}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":2,"col":4},"end":{"line":14,"col":1}},"generated_from_span":null},"content":{"Switch":{"If":[{"Move":{"kind":{"Base":1},"ty":{"Literal":"Bool"}}},{"span":{"span":{"file_id":0,"beg":{"line":2,"col":4},"end":{"line":14,"col":1}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":0,"beg":{"line":4,"col":23},"end":{"line":4,"col":27}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":3},"ty":{"Literal":"Bool"}},{"Use":{"Const":{"value":{"Literal":{"Bool":true}},"ty":{"Literal":"Bool"}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":20},"end":{"line":14,"col":1}},"generated_from_span":null},"content":{"Switch":{"If":[{"Move":{"kind":{"Base":3},"ty":{"Literal":"Bool"}}},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":20},"end":{"line":14,"col":1}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":0,"beg":{"line":5,"col":21},"end":{"line":5,"col":23}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":6},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"Aggregate":[{"Adt":["Tuple",null,null,{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},[]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":16},"end":{"line":5,"col":24}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":5},"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}},{"Aggregate":[{"Adt":[{"Adt":0},1,null,{"regions":[],"types":[{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]},[{"Move":{"kind":{"Base":6},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}}]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":23},"end":{"line":5,"col":24}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":6},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":16},"end":{"line":5,"col":25}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":6}},"generics":{"regions":[],"types":[{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Fun":6}}}}},"args":[{"Move":{"kind":{"Base":5},"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}}}],"dest":{"kind":{"Base":4},"ty":{"Adt":[{"Adt":1},{"regions":[],"types":[{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]},{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null,null],"target":{"Item":{"Type":1}}}]}}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":24},"end":{"line":5,"col":25}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":5},"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":16},"end":{"line":5,"col":25}},"generated_from_span":null},"content":{"FakeRead":{"kind":{"Base":4},"ty":{"Adt":[{"Adt":1},{"regions":[],"types":[{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]},{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null,null],"target":{"Item":{"Type":1}}}]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":16},"end":{"line":14,"col":1}},"generated_from_span":null},"content":{"Switch":{"Match":[{"kind":{"Base":4},"ty":{"Adt":[{"Adt":1},{"regions":[],"types":[{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]},{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null,null],"target":{"Item":{"Type":1}}}]}},[[[0],{"span":{"span":{"file_id":0,"beg":{"line":5,"col":16},"end":{"line":5,"col":25}},"generated_from_span":null},"statements":[]}],[[1],{"span":{"span":{"file_id":0,"beg":{"line":5,"col":16},"end":{"line":14,"col":1}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":0,"beg":{"line":5,"col":24},"end":{"line":5,"col":25}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":7},"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}},{"Use":{"Copy":{"kind":{"Projection":[{"kind":{"Base":4},"ty":{"Adt":[{"Adt":1},{"regions":[],"types":[{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]},{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null,null],"target":{"Item":{"Type":1}}}]}},{"Field":[{"Adt":[1,1]},0]}]},"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":24},"end":{"line":5,"col":25}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":8},"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}},{"Use":{"Copy":{"kind":{"Base":7},"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":16},"end":{"line":5,"col":25}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":7}},"generics":{"regions":[],"types":[{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Fun":7}}}}},"args":[{"Move":{"kind":{"Base":8},"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}}}],"dest":{"kind":{"Base":0},"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":24},"end":{"line":5,"col":25}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":8},"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":24},"end":{"line":5,"col":25}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":7},"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":6,"col":12},"end":{"line":6,"col":13}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":4},"ty":{"Adt":[{"Adt":1},{"regions":[],"types":[{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]},{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null,null],"target":{"Item":{"Type":1}}}]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":8,"col":12},"end":{"line":8,"col":13}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":3},"ty":{"Literal":"Bool"}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":10,"col":8},"end":{"line":10,"col":9}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":2},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":13,"col":4},"end":{"line":13,"col":5}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":1},"ty":{"Literal":"Bool"}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":14,"col":1},"end":{"line":14,"col":1}},"generated_from_span":null},"content":"Return","comments_before":[]}]}]],null]}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":16},"end":{"line":5,"col":25}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":9},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"Use":{"Copy":{"kind":{"Projection":[{"kind":{"Base":4},"ty":{"Adt":[{"Adt":1},{"regions":[],"types":[{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]},{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null,null],"target":{"Item":{"Type":1}}}]}},{"Field":[{"Adt":[1,0]},0]}]},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":16},"end":{"line":5,"col":25}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":2},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"Use":{"Copy":{"kind":{"Base":9},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":24},"end":{"line":5,"col":25}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":9},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":6,"col":12},"end":{"line":6,"col":13}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":4},"ty":{"Adt":[{"Adt":1},{"regions":[],"types":[{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]},{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null,null],"target":{"Item":{"Type":1}}}]}}},"comments_before":[]}]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":20},"end":{"line":8,"col":13}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":0,"beg":{"line":7,"col":16},"end":{"line":7,"col":18}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":2},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"Aggregate":[{"Adt":["Tuple",null,null,{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},[]]}]},"comments_before":[]}]}]}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":8,"col":12},"end":{"line":8,"col":13}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":3},"ty":{"Literal":"Bool"}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":16},"end":{"line":4,"col":17}},"generated_from_span":null},"content":{"FakeRead":{"kind":{"Base":2},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":9,"col":17},"end":{"line":9,"col":18}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":10},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"Use":{"Copy":{"kind":{"Base":2},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":9,"col":12},"end":{"line":9,"col":19}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":0},"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}},{"Aggregate":[{"Adt":[{"Adt":0},1,null,{"regions":[],"types":[{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]},[{"Move":{"kind":{"Base":10},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}}]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":9,"col":18},"end":{"line":9,"col":19}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":10},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":10,"col":8},"end":{"line":10,"col":9}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":2},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}},"comments_before":[]}]},{"span":{"span":{"file_id":0,"beg":{"line":2,"col":4},"end":{"line":13,"col":5}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":0,"beg":{"line":12,"col":8},"end":{"line":12,"col":12}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":0},"ty":{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}},{"Aggregate":[{"Adt":[{"Adt":0},0,null,{"regions":[],"types":[{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]},[]]}]},"comments_before":[]}]}]}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":13,"col":4},"end":{"line":13,"col":5}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":1},"ty":{"Literal":"Bool"}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":14,"col":1},"end":{"line":14,"col":1}},"generated_from_span":null},"content":"Return","comments_before":[]}]}}}}},{"def_id":1,"item_meta":{"name":[{"Ident":["rem_cli",0]},{"Ident":["main",0]}],"span":{"span":{"file_id":0,"beg":{"line":16,"col":0},"end":{"line":18,"col":1}},"generated_from_span":null},"source_text":"fn main() {\n\n}","attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":true,"opacity":"Transparent"},"signature":{"is_unsafe":false,"is_closure":false,"closure_info":null,"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[],"output":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},"kind":"Regular","is_global_initializer":null,"body":{"Ok":{"Structured":{"span":{"span":{"file_id":0,"beg":{"line":16,"col":0},"end":{"line":18,"col":1}},"generated_from_span":null},"locals":{"arg_count":0,"vars":[{"index":0,"name":null,"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"index":1,"name":null,"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}]},"comments":[],"body":{"span":{"span":{"file_id":0,"beg":{"line":16,"col":10},"end":{"line":18,"col":1}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":0,"beg":{"line":16,"col":10},"end":{"line":18,"col":1}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":1},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"Aggregate":[{"Adt":["Tuple",null,null,{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},[]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":16,"col":10},"end":{"line":18,"col":1}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":0},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"Use":{"Move":{"kind":{"Base":1},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":18,"col":1},"end":{"line":18,"col":1}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":0},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"Aggregate":[{"Adt":["Tuple",null,null,{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},[]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":18,"col":1},"end":{"line":18,"col":1}},"generated_from_span":null},"content":"Return","comments_before":[]}]}}}}},{"def_id":2,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["Try",0]},{"Ident":["branch",0]}],"span":{"span":{"file_id":7,"beg":{"line":217,"col":4},"end":{"line":217,"col":65}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Used in `?` to decide whether the operator should produce a value"},{"DocComment":" (because this returned [`ControlFlow::Continue`])"},{"DocComment":" or propagate a value back to the caller"},{"DocComment":" (because this returned [`ControlFlow::Break`])."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" #![feature(try_trait_v2)]"},{"DocComment":" use std::ops::{ControlFlow, Try};"},{"DocComment":""},{"DocComment":" assert_eq!(Ok::<_, String>(3).branch(), ControlFlow::Continue(3));"},{"DocComment":" assert_eq!(Err::<String, _>(3).branch(), ControlFlow::Break(Err(3)));"},{"DocComment":""},{"DocComment":" assert_eq!(Some(3).branch(), ControlFlow::Continue(3));"},{"DocComment":" assert_eq!(None::<String>.branch(), ControlFlow::Break(None));"},{"DocComment":""},{"DocComment":" assert_eq!(ControlFlow::<String, _>::Continue(3).branch(), ControlFlow::Continue(3));"},{"DocComment":" assert_eq!("},{"DocComment":"     ControlFlow::<_, String>::Break(3).branch(),"},{"DocComment":"     ControlFlow::Break(ControlFlow::Break(3)),"},{"DocComment":" );"},{"DocComment":" ```"},{"Unknown":{"path":"unstable","args":"feature = \"try_trait_v2\", issue = \"84277\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign"},"signature":{"is_unsafe":false,"is_closure":false,"closure_info":null,"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}}],"output":{"Adt":[{"Adt":1},{"regions":[],"types":[{"TraitType":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"trait_id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":1}}}}}},"Residual"]},{"TraitType":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"trait_id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":1}}}}}},"Output"]}],"const_generics":[],"trait_refs":[null,null],"target":{"Item":{"Type":1}}}]}},"kind":{"TraitDecl":{"trait_ref":{"trait_id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":1}}}},"item_name":"branch","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":3,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["FromResidual",0]},{"Ident":["from_residual",0]}],"span":{"span":{"file_id":7,"beg":{"line":330,"col":4},"end":{"line":330,"col":42}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Constructs the type from a compatible `Residual` type."},{"DocComment":""},{"DocComment":" This should be implemented consistently with the `branch` method such"},{"DocComment":" that applying the `?` operator will get back an equivalent residual:"},{"DocComment":" `FromResidual::from_residual(r).branch() --> ControlFlow::Break(r)`."},{"DocComment":" (The residual is not mandated to be *identical* when interconversion is involved.)"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" #![feature(try_trait_v2)]"},{"DocComment":" use std::ops::{ControlFlow, FromResidual};"},{"DocComment":""},{"DocComment":" assert_eq!(Result::<String, i64>::from_residual(Err(3_u8)), Err(3));"},{"DocComment":" assert_eq!(Option::<String>::from_residual(None), None);"},{"DocComment":" assert_eq!("},{"DocComment":"     ControlFlow::<_, String>::from_residual(ControlFlow::Break(5)),"},{"DocComment":"     ControlFlow::Break(5),"},{"DocComment":" );"},{"DocComment":" ```"},{"Unknown":{"path":"unstable","args":"feature = \"try_trait_v2\", issue = \"84277\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign"},"signature":{"is_unsafe":false,"is_closure":false,"closure_info":null,"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"R"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":1}}],"output":{"TypeVar":{"Free":0}}},"kind":{"TraitDecl":{"trait_ref":{"trait_id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":2}}}},"item_name":"from_residual","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":4,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["Try",0]},{"Ident":["from_output",0]}],"span":{"span":{"file_id":7,"beg":{"line":190,"col":4},"end":{"line":190,"col":49}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Constructs the type from its `Output` type."},{"DocComment":""},{"DocComment":" This should be implemented consistently with the `branch` method"},{"DocComment":" such that applying the `?` operator will get back the original value:"},{"DocComment":" `Try::from_output(x).branch() --> ControlFlow::Continue(x)`."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" #![feature(try_trait_v2)]"},{"DocComment":" use std::ops::Try;"},{"DocComment":""},{"DocComment":" assert_eq!(<Result<_, String> as Try>::from_output(3), Ok(3));"},{"DocComment":" assert_eq!(<Option<_> as Try>::from_output(4), Some(4));"},{"DocComment":" assert_eq!("},{"DocComment":"     <std::ops::ControlFlow<String, _> as Try>::from_output(5),"},{"DocComment":"     std::ops::ControlFlow::Continue(5),"},{"DocComment":" );"},{"DocComment":""},{"DocComment":" # fn make_question_mark_work() -> Option<()> {"},{"DocComment":" assert_eq!(Option::from_output(4)?, 4);"},{"DocComment":" # None }"},{"DocComment":" # make_question_mark_work();"},{"DocComment":""},{"DocComment":" // This is used, for example, on the accumulator in `try_fold`:"},{"DocComment":" let r = std::iter::empty().try_fold(4, |_, ()| -> Option<_> { unreachable!() });"},{"DocComment":" assert_eq!(r, Some(4));"},{"DocComment":" ```"},{"Unknown":{"path":"unstable","args":"feature = \"try_trait_v2\", issue = \"84277\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign"},"signature":{"is_unsafe":false,"is_closure":false,"closure_info":null,"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TraitType":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"trait_id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":1}}}}}},"Output"]}],"output":{"TypeVar":{"Free":0}}},"kind":{"TraitDecl":{"trait_ref":{"trait_id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":1}}}},"item_name":"from_output","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":5,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["option",0]},{"Impl":[{"Trait":0},39]},{"Ident":["from_output",0]}],"span":{"span":{"file_id":1,"beg":{"line":2474,"col":4},"end":{"line":2474,"col":48}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign"},"signature":{"is_unsafe":false,"is_closure":false,"closure_info":null,"generics":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}}],"output":{"Adt":[{"Adt":0},{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}},"kind":{"TraitImpl":{"impl_ref":{"impl_id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"TraitImpl":0}}}},"trait_ref":{"trait_id":1,"generics":{"regions":[],"types":[{"Adt":[{"Adt":0},{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":1}}}},"item_name":"from_output","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":6,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["option",0]},{"Impl":[{"Trait":0},39]},{"Ident":["branch",0]}],"span":{"span":{"file_id":1,"beg":{"line":2479,"col":4},"end":{"line":2479,"col":64}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign"},"signature":{"is_unsafe":false,"is_closure":false,"closure_info":null,"generics":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Adt":[{"Adt":0},{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}],"output":{"Adt":[{"Adt":1},{"regions":[],"types":[{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null,null],"target":{"Item":{"Type":1}}}]}},"kind":{"TraitImpl":{"impl_ref":{"impl_id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"TraitImpl":0}}}},"trait_ref":{"trait_id":1,"generics":{"regions":[],"types":[{"Adt":[{"Adt":0},{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":1}}}},"item_name":"branch","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":7,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["option",0]},{"Impl":[{"Trait":1},40]},{"Ident":["from_residual",0]}],"span":{"span":{"file_id":1,"beg":{"line":2492,"col":4},"end":{"line":2492,"col":67}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign"},"signature":{"is_unsafe":false,"is_closure":false,"closure_info":null,"generics":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}],"output":{"Adt":[{"Adt":0},{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}},"kind":{"TraitImpl":{"impl_ref":{"impl_id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"TraitImpl":1}}}},"trait_ref":{"trait_id":2,"generics":{"regions":[],"types":[{"Adt":[{"Adt":0},{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]},{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":2}}}},"item_name":"from_residual","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}}],"global_decls":[],"trait_decls":[null,{"def_id":1,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["Try",0]}],"span":{"span":{"file_id":7,"beg":{"line":131,"col":0},"end":{"line":131,"col":27}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" The `?` operator and `try {}` blocks."},{"DocComment":""},{"DocComment":" `try_*` methods typically involve a type implementing this trait.  For"},{"DocComment":" example, the closures passed to [`Iterator::try_fold`] and"},{"DocComment":" [`Iterator::try_for_each`] must return such a type."},{"DocComment":""},{"DocComment":" `Try` types are typically those containing two or more categories of values,"},{"DocComment":" some subset of which are so commonly handled via early returns that it's"},{"DocComment":" worth providing a terse (but still visible) syntax to make that easy."},{"DocComment":""},{"DocComment":" This is most often seen for error handling with [`Result`] and [`Option`]."},{"DocComment":" The quintessential implementation of this trait is on [`ControlFlow`]."},{"DocComment":""},{"DocComment":" # Using `Try` in Generic Code"},{"DocComment":""},{"DocComment":" `Iterator::try_fold` was stabilized to call back in Rust 1.27, but"},{"DocComment":" this trait is much newer.  To illustrate the various associated types and"},{"DocComment":" methods, let's implement our own version."},{"DocComment":""},{"DocComment":" As a reminder, an infallible version of a fold looks something like this:"},{"DocComment":" ```"},{"DocComment":" fn simple_fold<A, T>("},{"DocComment":"     iter: impl Iterator<Item = T>,"},{"DocComment":"     mut accum: A,"},{"DocComment":"     mut f: impl FnMut(A, T) -> A,"},{"DocComment":" ) -> A {"},{"DocComment":"     for x in iter {"},{"DocComment":"         accum = f(accum, x);"},{"DocComment":"     }"},{"DocComment":"     accum"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" So instead of `f` returning just an `A`, we'll need it to return some other"},{"DocComment":" type that produces an `A` in the \"don't short circuit\" path.  Conveniently,"},{"DocComment":" that's also the type we need to return from the function."},{"DocComment":""},{"DocComment":" Let's add a new generic parameter `R` for that type, and bound it to the"},{"DocComment":" output type that we want:"},{"DocComment":" ```"},{"DocComment":" # #![feature(try_trait_v2)]"},{"DocComment":" # use std::ops::Try;"},{"DocComment":" fn simple_try_fold_1<A, T, R: Try<Output = A>>("},{"DocComment":"     iter: impl Iterator<Item = T>,"},{"DocComment":"     mut accum: A,"},{"DocComment":"     mut f: impl FnMut(A, T) -> R,"},{"DocComment":" ) -> R {"},{"DocComment":"     todo!()"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" If we get through the entire iterator, we need to wrap up the accumulator"},{"DocComment":" into the return type using [`Try::from_output`]:"},{"DocComment":" ```"},{"DocComment":" # #![feature(try_trait_v2)]"},{"DocComment":" # use std::ops::{ControlFlow, Try};"},{"DocComment":" fn simple_try_fold_2<A, T, R: Try<Output = A>>("},{"DocComment":"     iter: impl Iterator<Item = T>,"},{"DocComment":"     mut accum: A,"},{"DocComment":"     mut f: impl FnMut(A, T) -> R,"},{"DocComment":" ) -> R {"},{"DocComment":"     for x in iter {"},{"DocComment":"         let cf = f(accum, x).branch();"},{"DocComment":"         match cf {"},{"DocComment":"             ControlFlow::Continue(a) => accum = a,"},{"DocComment":"             ControlFlow::Break(_) => todo!(),"},{"DocComment":"         }"},{"DocComment":"     }"},{"DocComment":"     R::from_output(accum)"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" We'll also need [`FromResidual::from_residual`] to turn the residual back"},{"DocComment":" into the original type.  But because it's a supertrait of `Try`, we don't"},{"DocComment":" need to mention it in the bounds.  All types which implement `Try` can be"},{"DocComment":" recreated from their corresponding residual, so we'll just call it:"},{"DocComment":" ```"},{"DocComment":" # #![feature(try_trait_v2)]"},{"DocComment":" # use std::ops::{ControlFlow, Try};"},{"DocComment":" pub fn simple_try_fold_3<A, T, R: Try<Output = A>>("},{"DocComment":"     iter: impl Iterator<Item = T>,"},{"DocComment":"     mut accum: A,"},{"DocComment":"     mut f: impl FnMut(A, T) -> R,"},{"DocComment":" ) -> R {"},{"DocComment":"     for x in iter {"},{"DocComment":"         let cf = f(accum, x).branch();"},{"DocComment":"         match cf {"},{"DocComment":"             ControlFlow::Continue(a) => accum = a,"},{"DocComment":"             ControlFlow::Break(r) => return R::from_residual(r),"},{"DocComment":"         }"},{"DocComment":"     }"},{"DocComment":"     R::from_output(accum)"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" But this \"call `branch`, then `match` on it, and `return` if it was a"},{"DocComment":" `Break`\" is exactly what happens inside the `?` operator.  So rather than"},{"DocComment":" do all this manually, we can just use `?` instead:"},{"DocComment":" ```"},{"DocComment":" # #![feature(try_trait_v2)]"},{"DocComment":" # use std::ops::Try;"},{"DocComment":" fn simple_try_fold<A, T, R: Try<Output = A>>("},{"DocComment":"     iter: impl Iterator<Item = T>,"},{"DocComment":"     mut accum: A,"},{"DocComment":"     mut f: impl FnMut(A, T) -> R,"},{"DocComment":" ) -> R {"},{"DocComment":"     for x in iter {"},{"DocComment":"         accum = f(accum, x)?;"},{"DocComment":"     }"},{"DocComment":"     R::from_output(accum)"},{"DocComment":" }"},{"DocComment":" ```"},{"Unknown":{"path":"unstable","args":"feature = \"try_trait_v2\", issue = \"84277\""}},{"Unknown":{"path":"rustc_on_unimplemented","args":"on(all(from_desugaring = \"TryBlock\"), message =\n\"a `try` block must return `Result` or `Option` \\\n                    (or another type that implements `{Try}`)\",\nlabel =\n\"could not wrap the final value of the block as `{Self}` doesn't implement `Try`\",),\non(all(from_desugaring = \"QuestionMark\"), message =\n\"the `?` operator can only be applied to values that implement `{Try}`\", label\n= \"the `?` operator cannot be applied to type `{Self}`\")"}},{"Unknown":{"path":"doc","args":"alias = \"?\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[{"clause_id":0,"span":{"span":{"file_id":7,"beg":{"line":131,"col":15},"end":{"line":131,"col":27}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"trait_id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TraitType":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"trait_id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":1}}}}}},"Residual"]}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":2}}}}}},null,null],"consts":[],"const_defaults":{},"types":["Output","Residual"],"type_defaults":{},"type_clauses":[],"required_methods":[["from_output",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":4,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"Fun":4}}}},"kind":{"TraitMethod":[1,"from_output"]}}],["branch",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"Fun":2}}}},"kind":{"TraitMethod":[1,"branch"]}}]],"provided_methods":[]},{"def_id":2,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["FromResidual",0]}],"span":{"span":{"file_id":7,"beg":{"line":307,"col":0},"end":{"line":307,"col":51}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Used to specify which residuals can be converted into which [`crate::ops::Try`] types."},{"DocComment":""},{"DocComment":" Every `Try` type needs to be recreatable from its own associated"},{"DocComment":" `Residual` type, but can also have additional `FromResidual` implementations"},{"DocComment":" to support interconversion with other `Try` types."},{"Unknown":{"path":"rustc_on_unimplemented","args":"on(all(from_desugaring = \"QuestionMark\", _Self = \"core::result::Result<T, E>\",\nR = \"core::option::Option<core::convert::Infallible>\",), message =\n\"the `?` operator can only be used on `Result`s, not `Option`s, \\\n            in {ItemContext} that returns `Result`\",\nlabel = \"use `.ok_or(...)?` to provide an error compatible with `{Self}`\",\nparent_label = \"this function returns a `Result`\"),\non(all(from_desugaring = \"QuestionMark\", _Self =\n\"core::result::Result<T, E>\",), message =\n\"the `?` operator can only be used on `Result`s \\\n            in {ItemContext} that returns `Result`\",\nlabel = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\nparent_label = \"this function returns a `Result`\"),\non(all(from_desugaring = \"QuestionMark\", _Self = \"core::option::Option<T>\", R\n= \"core::result::Result<T, E>\",), message =\n\"the `?` operator can only be used on `Option`s, not `Result`s, \\\n            in {ItemContext} that returns `Option`\",\nlabel = \"use `.ok()?` if you want to discard the `{R}` error information\",\nparent_label = \"this function returns an `Option`\"),\non(all(from_desugaring = \"QuestionMark\", _Self = \"core::option::Option<T>\",),\nmessage =\n\"the `?` operator can only be used on `Option`s \\\n            in {ItemContext} that returns `Option`\",\nlabel = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\nparent_label = \"this function returns an `Option`\"),\non(all(from_desugaring = \"QuestionMark\", _Self =\n\"core::ops::control_flow::ControlFlow<B, C>\", R =\n\"core::ops::control_flow::ControlFlow<B, C>\",), message =\n\"the `?` operator in {ItemContext} that returns `ControlFlow<B, _>` \\\n            can only be used on other `ControlFlow<B, _>`s (with the same Break type)\",\nlabel = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\nparent_label = \"this function returns a `ControlFlow`\", note =\n\"unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\"),\non(all(from_desugaring = \"QuestionMark\", _Self =\n\"core::ops::control_flow::ControlFlow<B, C>\",), message =\n\"the `?` operator can only be used on `ControlFlow`s \\\n            in {ItemContext} that returns `ControlFlow`\",\nlabel = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\nparent_label = \"this function returns a `ControlFlow`\",),\non(all(from_desugaring = \"QuestionMark\"), message =\n\"the `?` operator can only be used in {ItemContext} \\\n                    that returns `Result` or `Option` \\\n                    (or another type that implements `{FromResidual}`)\",\nlabel = \"cannot use the `?` operator in {ItemContext} that returns `{Self}`\",\nparent_label =\n\"this function should return `Result` or `Option` to accept `?`\"),"}},{"Unknown":{"path":"rustc_diagnostic_item","args":null}},{"Unknown":{"path":"unstable","args":"feature = \"try_trait_v2\", issue = \"84277\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"R"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[null],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"required_methods":[["from_residual",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"Fun":3}}}},"kind":{"TraitMethod":[2,"from_residual"]}}]],"provided_methods":[]}],"trait_impls":[{"def_id":0,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["option",0]},{"Impl":[{"Trait":0},39]}],"span":{"span":{"file_id":1,"beg":{"line":2469,"col":0},"end":{"line":2469,"col":30}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"Unknown":{"path":"unstable","args":"feature = \"try_trait_v2\", issue = \"84277\""}}],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign"},"impl_trait":{"trait_id":1,"generics":{"regions":[],"types":[{"Adt":[{"Adt":0},{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":1}}}},"generics":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[{"kind":{"TraitImpl":[1,{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"TraitImpl":1}}}]},"trait_decl_ref":{"regions":[],"skip_binder":{"trait_id":2,"generics":{"regions":[],"types":[{"Adt":[{"Adt":0},{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]},{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":2}}}}}},null,null],"consts":[],"types":[["Output",{"TypeVar":{"Free":0}}],["Residual",{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}]],"type_clauses":[],"required_methods":[["from_output",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Fun":5}}}},"kind":{"TraitMethod":[1,"from_output"]}}],["branch",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":6,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Fun":6}}}},"kind":{"TraitMethod":[1,"branch"]}}]],"provided_methods":[]},{"def_id":1,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["option",0]},{"Impl":[{"Trait":1},40]}],"span":{"span":{"file_id":1,"beg":{"line":2490,"col":0},"end":{"line":2490,"col":68}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"Unknown":{"path":"unstable","args":"feature = \"try_trait_v2\", issue = \"84277\""}}],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign"},"impl_trait":{"trait_id":2,"generics":{"regions":[],"types":[{"Adt":[{"Adt":0},{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]},{"Adt":[{"Adt":0},{"regions":[],"types":[{"Adt":[{"Adt":2},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Type":0}}}]}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":2}}}},"generics":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[null],"consts":[],"types":[],"type_clauses":[],"required_methods":[["from_residual",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null],"target":{"Item":{"Fun":7}}}},"kind":{"TraitMethod":[2,"from_residual"]}}]],"provided_methods":[]}],"ordered_decls":[{"Type":{"NonRec":0}},{"Type":{"NonRec":1}},{"Type":{"NonRec":2}},{"Fun":{"NonRec":6}},{"Fun":{"NonRec":7}},{"Fun":{"NonRec":0}},{"Fun":{"NonRec":1}},{"Fun":{"NonRec":2}},{"TraitDecl":{"NonRec":2}},{"TraitDecl":{"NonRec":1}},{"TraitImpl":{"NonRec":1}},{"Fun":{"NonRec":5}},{"TraitImpl":{"NonRec":0}},{"Fun":{"NonRec":3}},{"Fun":{"NonRec":4}}]}}