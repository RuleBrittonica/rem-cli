    let mut borrower_values: (String, String) = ("".to_string(), "".to_string());
    let mut repair_system: Option<&dyn RepairSystem> = None;

    // Handle -c -b -f flags for Program Control Flow options
    let mut options: Vec<ProgramOptions> = vec![];
    {
        use ProgramOptions::*;

        // Check for each flag and add to the options vector
        if args.get_flag("controller") {
            options.push(Controller);
        }

        if args.get_flag("borrower") {
            options.push(Borrower);

            // Parse the next two values for it.
            if let Some(values) = args.get_many::<String>("borrower") {
                // Ensure there are exactly two values
                let values_vec: Vec<String> = values.map(|v| v.to_string()).collect();
                if values_vec.len() == 2 {
                    borrower_values = (values_vec[0].clone(), values_vec[1].clone());
                } else {
                    error!("Expected exactly two values for borrower but got {}", values_vec.len());
                    std::process::exit(1);
                }
            }

            // Log borrower values
            debug!("Borrower Value 1: {}", borrower_values.0);
            debug!("Borrower Value 2: {}", borrower_values.1);
        }
        if args.get_flag("repairer") {
            options.push(Repairer);

            // Parse the digit into a repair type
            if let Some(repair_system_value) = args.get_one::<String>("repairer") {
                match repair_system_value.as_str() {
                    "1" => repair_system = Some(&repair_lifetime_simple::Repairer {}),
                    "2" => repair_system = Some(&repair_lifetime_tightest_bound_first::Repairer {}),
                    "3" => repair_system = Some(&repair_lifetime_loosest_bound_first::Repairer {}),
                    _   => {
                        error!("Invalid repair system type provided: {}", repair_system_value);
                        std::process::exit(1);
                    }
                }
            }

            if let Some(system) = repair_system {
                debug!("Repair System Chosen: {:?}", DebugRepairSystem(system));
            }
        }

        // If no specific options are set, run all components by default
        if options.is_empty() {
            options.push(Controller);
            options.push(Borrower);
            options.push(Repairer);
        }

        // Log which options will be run
        for opt in options.iter() {
            match opt {
                Controller => info!("Scheduled: Running Controller"),
                Borrower => info!("Scheduled: Running Borrower"),
                Repairer => info!("Scheduled: Running Repairer"),
            };
        }
    }

    // Parse the input data to get it into a usable form for invocation
    let file_path: &String = args.get_one::<String>("file_path").unwrap();
    let new_file_path: &String = args.get_one::<String>("new_file_path").unwrap();
    let caller_fn_name: &String = args.get_one::<String>("caller_fn_name").unwrap();
    let callee_fn_name: &String = args.get_one::<String>("callee_fn_name").unwrap();

    // Log the input parameters to the program, just in case
    debug!("file_path input is: {}", file_path);
    debug!("new_file_path input is: {}", new_file_path);
    debug!("caller_fn_name input is: {}", caller_fn_name);
    debug!("callee_fn_name input is: {}", callee_fn_name);

    // Get the refactor type, default to "default" if not provided
    let refactor_type: Option<&str> = args.get_one::<String>("type").map(|s: &String| s.as_str());


    // Extract the method into a new function, copy the code across, and infer
    // the function signature
    // TODO: Decide if this will be done by Rust calling rust-analyzer or by the
    // TODO  VSCode extension
    // !Currently doesn't do anything.
    let fn_body_extraction_res: Result<(), error::ExtractFnBodyError> = extract_fn_body(file_path, new_file_path, callee_fn_name, caller_fn_name);
    match fn_body_extraction_res {
        Ok(_) => {},
        Err(e) => {
            error!("Failed to extract function body: {:?}", e);
            return;
        },
    }

    // Backup the input file, incase the extraction fails.
    info!("Beginning backup. Will backup file to /tmp/{}-cli-extract.bk", file_path);
    let backup: String = format!("/tmp/{}-cli-extract.bk", file_path);
    if let Err(e) = fs::copy(file_path, &backup) {
        error!("Failed to create backup in main: {:?}", e);
        warn!("Returning early, extraction will not proceed");
        return;
    }

    // Call the appropriate extraction method from refactor_main
    // Determine which extraction method to use based on the refactor type
    // Each of these functions handles their own logging.
    let success: bool = match refactor_type {
        Some("generic") => extract_function_generic(file_path, new_file_path, callee_fn_name, caller_fn_name, options, borrower_values, repair_system),
        Some("async") => extract_function_async(file_path, new_file_path, callee_fn_name, caller_fn_name, options, borrower_values, repair_system),
        None | Some("default") => extract_function(file_path, new_file_path, callee_fn_name, caller_fn_name, options, borrower_values, repair_system),
        Some(other) => {
            log::error!("Unsupported refactor type: {}", other);
            std::process::exit(1);
        }
    };


// for opt in options {
    //     match opt {
    //         ProgramOptions::Controller => {
    //             if !non_local_controller(file_path, new_file_path, callee_fn_name, caller_fn_name) {
    //                 error!("Controller NOT completed - halting further execution");
    //                 return false;
    //             }
    //             info!("Controller completed successfully");
    //         }
    //         ProgramOptions::Borrower => {
    //             if !borrow(file_path, new_file_path, callee_fn_name, caller_fn_name, &borrower_values) {
    //                 error!("Borrow NOT completed - halting further execution");
    //                 return false;
    //             }
    //             info!("Borrow completed successfully");
    //         }
    //         ProgramOptions::Repairer => {
    //             let fn_name: &str = callee_fn_name; // or `caller_fn_name` based on your logic

    //             // Ensure that `repair_system` is not None
    //             if let Some(repairer_type) = repair_system {
    //                 if !repair_lifetime(file_path, new_file_path, fn_name, &repairer_type) {
    //                     error!("Repairer NOT completed - halting further execution");
    //                     return false;
    //                 }
    //                 info!("Repairer completed successfully");
    //             } else {
    //                 error!("No repair system provided - halting further execution");
    //                 return false;
    //             }
    //         }
    //     }
    // }